version: '3.8'

volumes:
  postgres_data:
  n8n_data:
  ollama_models:
  whatsapp_data:
  evolution_data:

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: n8n
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 200M
    
  n8n:
    image: n8nio/n8n
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=${DB_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_SECURE_COOKIE=false
      - GENERIC_TIMEZONE=America/Mexico_City
      - N8N_EDITOR_BASE_URL=https://miagentepersonal.me:8443
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 500M
        reservations:
          memory: 300M
    
  ollama:
    image: ollama/ollama
    volumes:
      - ollama_models:/root/.ollama
    ports:
      - "11434:11434"
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1.5G
    environment:
      - OLLAMA_MODELS=/root/.ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    
  nginx:
    image: nginx:alpine
    ports:
      - "8090:80"    # HTTP - Coincide con regla Azure "mi_agente" 
      - "8443:443"   # HTTPS - Coincide con regla Azure "mi_agentee"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt/archive/miagentepersonal.me:/etc/nginx/ssl:ro
    depends_on:
      - n8n
      - evolution-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 30M

  # Servicio dummy para file server
  file-server-dummy:
    image: alpine:latest
    command: ["sh", "-c", "while true; do nc -l -p 8080 -e echo OK; done"]
    # Sin mapeo de puertos, solo accesible dentro de la red interna de Docker
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 15M
        reservations:
          memory: 10M
  # Evolution API - Reemplaza el servicio whatsapp anterior
  evolution-api:
    image: atendai/evolution-api:latest
    depends_on:
      postgres:
        condition: service_healthy
      file-server-dummy:
        condition: service_started
    environment:
      - SERVER_PORT=8080
      - DATABASE_ENABLED=true
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://n8n:${DB_PASSWORD}@postgres:5432/evolution_db
      - REDIS_ENABLED=false
      - CACHE_REDIS_ENABLED=false
      - CACHE_REDIS_URI=
      - CACHE_LOCAL_ENABLED=true
      - WEBHOOK_GLOBAL_URL=https://miagentepersonal.me:8443/evolution/webhook
      - AUTHENTICATION_TYPE=apikey
      - AUTHENTICATION_API_KEY=evolution-api-key
      - CONFIG_SESSION_PHONE_CLIENT=Evolution API
      - CONFIG_SESSION_PHONE_NAME=Chrome
      - PROVIDER_ENABLED=true
      - PROVIDER_FILES_ENABLED=false
      - FILE_SERVER_ENABLED=false
      - FILES_ENABLED=false
      - PROVIDER_FILES_TYPE=none
      - PROVIDER_HOST=file-server-dummy
      - PROVIDER_PORT=8080
    # Puerto directo - Coincide con regla Azure "Allow-Port-8080-Mermeladas"
    ports:
      - "8080:8080"
    volumes:
      - evolution_data:/evolution/instances
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 400M
        reservations:
          memory: 250M

  # Backup automático
  backup:
    image: postgres:15-alpine
    depends_on:
      - postgres
    volumes:
      - ./backups:/backup
      - postgres_data:/var/lib/postgresql/data:ro
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    command: |
      sh -c "
      while true; do
        sleep 86400  # 24 horas
        pg_dump -h postgres -U n8n -d n8n > /backup/backup_$$(date +%Y%m%d_%H%M%S).sql
        find /backup -name '*.sql' -mtime +7 -delete  # Eliminar backups > 7 días
        echo 'Backup completado: backup_$$(date +%Y%m%d_%H%M%S).sql'
      done"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 100M
        reservations:
          memory: 50M